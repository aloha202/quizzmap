<?php

namespace App\Controller\Admin;

use App\Entity\Location;
use App\Entity\Submap;
use App\Repository\LocationRepository;
use Doctrine\ORM\EntityManagerInterface;
use EasyCorp\Bundle\EasyAdminBundle\Config\Action;
use EasyCorp\Bundle\EasyAdminBundle\Config\Actions;
use EasyCorp\Bundle\EasyAdminBundle\Config\Assets;
use EasyCorp\Bundle\EasyAdminBundle\Config\Crud;
use EasyCorp\Bundle\EasyAdminBundle\Context\AdminContext;
use EasyCorp\Bundle\EasyAdminBundle\Controller\AbstractCrudController;
use EasyCorp\Bundle\EasyAdminBundle\Field\AssociationField;
use EasyCorp\Bundle\EasyAdminBundle\Field\BooleanField;
use EasyCorp\Bundle\EasyAdminBundle\Field\CollectionField;
use EasyCorp\Bundle\EasyAdminBundle\Field\NumberField;
use EasyCorp\Bundle\EasyAdminBundle\Field\TextField;
use EasyCorp\Bundle\EasyAdminBundle\Router\AdminUrlGenerator;

class LocationCrudController extends AbstractCrudController
{
    /**
     * @var AdminUrlGenerator
     */
    private $adminUrlGenerator;

    public static function getEntityFqcn(): string
    {
        return Location::class;
    }

    public function __construct(AdminUrlGenerator $adminUrlGenerator)
    {

        $this->adminUrlGenerator = $adminUrlGenerator;
    }


    public function configureFields(string $pageName): iterable
    {
        return [
            AssociationField::new('parent')->setLabel('Parent location'),
            AssociationField::new('parent_map')->setLabel('Map')->setHelp('Default map if not set'),
            AssociationField::new('type'),
            TextField::new('name'),
            TextField::new('position'),
            NumberField::new('num_of_questions'),
            BooleanField::new('is_active'),
            NumberField::new('pass_rate')->onlyOnForms(),
            NumberField::new('difficulty_from')->onlyOnForms(),
            NumberField::new('difficulty_to')->onlyOnForms(),
            NumberField::new('min_rating')->onlyOnForms(),
            NumberField::new('min_points')->onlyOnForms(),
            TextField::new('mapsize')->onlyWhenUpdating()
                ->setHelp('Will create submap if it doesn\'t exist. Eg. 800x600'),

            CollectionField::new('locations')->onlyOnIndex()
        ];
    }

    public function configureAssets(Assets $assets): Assets
    {
        return parent::configureAssets($assets)
            ->addJsFile('bundles/jquery.js')
            ->addJsFile('bundles/admin.js'); // TODO: Change the autogenerated stub
    }

    public function configureActions(Actions $actions): Actions
    {
        return parent::configureActions($actions)
            ->add(Crud::PAGE_INDEX, Action::new('Createmap', 'Create map')
            ->linkToCrudAction('createmapAction')

                ->displayIf(function (Location $location){
                    return !$location->hasSubmap() && $location->isParent();
                })

            )->add(Crud::PAGE_INDEX, Action::new('Addsublocation', 'Add sublocation')
                ->linkToCrudAction('addsublocationAction')
                ->displayIf(function (Location $location){
                    return $location->hasSubmap() && $location->isParent();
                })
            ); // TODO: Change the autogenerated stub
    }

    public function createmapAction(AdminContext $adminContext, LocationRepository $locationRepository, EntityManagerInterface $em)
    {
        $id = $adminContext->getRequest()->query->get('entityId');

        $location = $locationRepository->find($id);

        if($location->getSubmap() == null){
            $submap = new Submap();
            $submap->setLocation($location);
            $submap->setMapsize('800x600');
            $em->persist($submap);
            $em->flush();
            $adminContext->getRequest()->getSession()->getFlashBag()->add('success', 'Map created');
        }else{
            $adminContext->getRequest()->getSession()->getFlashBag()->add('error', 'Map already exists');
        }

        $url = $this->adminUrlGenerator->setController(LocationCrudController::class)
            ->setAction('index')
            ->generateUrl();

        return $this->redirect($url);

    }

    public function addsublocationAction(AdminContext $adminContext, LocationRepository $locationRepository, EntityManagerInterface $em)
    {
        $id = $adminContext->getRequest()->query->get('entityId');

        $location = $locationRepository->find($id);

        if($location->isParent() && $location->hasSubmap())
        {
            $subloc = new Location();
            $subloc->setParent($location);
            $subloc->setParentMap($location->getSubmap());
            $subloc->setName(' ');
            $subloc->setType($location->getType());
            $subloc->setIsActive(false);
            $em->persist($subloc);
            $em->flush();

            $url = $this->adminUrlGenerator->setController(LocationCrudController::class)
                ->setAction('edit')
                ->setEntityId($subloc->getId())
                ->generateUrl();

            return $this->redirect($url);
        }else{
            die('no submap and/or already has a parent');
        }
    }

}
